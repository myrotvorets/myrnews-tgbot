name: Build and Push Docker Image

on:
  repository_dispatch:
    types:
      - tests-passed

env:
  IMAGE_NAME: myrotvorets/myrnews-tgbot
  EVENT: ${{ github.event.client_payload.event_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      refkind: ${{ steps.kind.outputs.kind }}
      reference: ${{ github.event.client_payload.ref }}
      commit: ${{ github.event.client_payload.sha }}

    steps:
      - name: Set image creation timestamp
        run: echo TIMESTAMP="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@f25a3a9f25bd5f4c5d77189cab02ff357b5aedeb # tag=v2.4.1
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: Analyze commit info
        id: kind
        uses: myrotvorets/composite-actions/refkind@master
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: Determine Docker tags
        id: meta
        uses: myrotvorets/composite-actions/docker-tags@master
        with:
          refkind: ${{ steps.kind.outputs.kind }}
          refname: ${{ steps.kind.outputs.name }}
          commit_hash: ${{ github.event.client_payload.sha }}
          image_name: ${{ env.IMAGE_NAME }}
          default_branch: ${{ github.event.repository.default_branch }}

      - name: Login to DockerHub
        uses: docker/login-action@6af3c118c8376c675363897acf1757f7a9be6583 # tag=v1.13.0
        if: ${{ env.EVENT != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # renovate: tag=v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # renovate: tag=v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.event.client_payload.sha }}

      - run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Build and push
        uses: docker/build-push-action@7f9d37fa544684fb73bfe4835ed7214c255ce02b # renovate: tag=v2.9.0
        with:
          push: ${{ env.EVENT != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ env.TIMESTAMP }}
            org.opencontainers.image.revision=${{ github.event.client_payload.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.refkind == 'tag' }}

    steps:
      - name: Checkout
        uses: actions/checkout@f25a3a9f25bd5f4c5d77189cab02ff357b5aedeb # tag=v2.4.1
        with:
          ref: ${{ needs.build.outputs.commit }}

      - name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Get release description
        id: release_params
        run: |
          SUBJECT="$(git for-each-ref "${{ needs.build.outputs.reference }}" --format="%(contents:subject)")"
          BODY="$(git for-each-ref "${{ needs.build.outputs.reference }}" --format="%(contents:body)")"
          echo "::set-output name=subject::${SUBJECT}"
          echo "::set-output name=body::${BODY}"

      - name: Create a release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # renovate: tag=v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.reference }}
          release_name: ${{ steps.release_params.subject }}
          body: ${{ steps.release_params.body }}
